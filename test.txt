onMounted(() => {
  type DataType = Record<string, Record<string, any>>;

  function setAdminSettingFormValues(data: DataType, key: string) {
    const settingData = data[key];
    for (const settingName in settingData) {
      const settingValue = settingData[settingName];
      // 各設定名と設定値を使って処理を行う
      console.log(`設定 ${settingName} の値は ${settingValue} です`);
      // 例: フォームのフィールドを更新する、リアクティブ変数に格納するなど
    }
  }

  // 使用例
  const adminSettings: DataType = {
    userPermissions: {
      canEdit: true,
      canDelete: false,
    },
    displaySettings: {
      theme: "dark",
      fontSize: "medium",
    },
  };

  // 特定のキーを使用して関数を呼び出す
  setAdminSettingFormValues(adminSettings, "userPermissions");
});


onMounted(() => {
  // 設定値は `string`、`number`、または `boolean` のいずれか
  type SettingValue = string | number | boolean;
  type DataType = Record<string, Record<string, SettingValue>>;

  function setAdminSettingFormValues(data: DataType, key: string) {
    const settingData = data[key];
    for (const settingName in settingData) {
      const settingValue = settingData[settingName];
      console.log(`設定 ${settingName} の値は ${settingValue} です`);
      // ここで各設定値に対して適切な処理を実行
    }
  }

  // 使用例
  const adminSettings: DataType = {
    userPermissions: {
      canEdit: true,
      canDelete: false,
    },
    displaySettings: {
      theme: "dark",
      fontSize: 14,
    },
  };

  // 特定のキーを使って関数を呼び出す
  setAdminSettingFormValues(adminSettings, "userPermissions");
});


onMounted(() => {
  // 設定値がオブジェクトを含む場合の型定義
  type SettingValue = string | number | boolean | { [key: string]: string | number | boolean };
  type DataType = Record<string, Record<string, SettingValue>>;

  function setAdminSettingFormValues(data: DataType, key: string) {
    const settingData = data[key];
    for (const settingName in settingData) {
      const settingValue = settingData[settingName];
      console.log(`設定 ${settingName} の値は ${settingValue} です`);
    }
  }

  // 使用例
  const adminSettings: DataType = {
    userPermissions: {
      canEdit: true,
      canDelete: false,
      additionalInfo: { maxAttempts: 5, isAdmin: true },
    },
    displaySettings: {
      theme: "dark",
      fontSize: 14,
    },
  };

  setAdminSettingFormValues(adminSettings, "userPermissions");
});


// 型を定義
type SettingValue = string | number | boolean;
type DefaultValues = Record<string, Record<string, SettingValue>>;

// デフォルトの設定オブジェクトを定義
const defaultValues: DefaultValues = {
  connection: {
    method: 'None',
  },
  WebSocket: {
    authMethod: 1,
    endpoint_port: 443,
  },
  cloudapi: {
    cloud_login_sslCertCheck: false,
  }
};

// WebSocket の認証方法を取得および変更する関数
let websocketAuthMethodValue = defaultValues.WebSocket.authMethod;

const websocketAuthMethodChange = (value: string | number) => {
  // 新しい値の型が一致するか確認してから変更
  websocketAuthMethodValue = value;
};

// 管理設定フォームの値を設定する関数
function setAdminSettingFormValues(data: DefaultValues, key: string) {
  let settingData = data[key];
  if (!settingData) return;  // 設定が見つからなければ終了

  for (let settingName in settingData) {
    let settingValue = settingData[settingName];

    if (typeof settingValue === 'object') {
      for (let objectName in settingValue) {
        let objectKey = `${settingName}.${objectName}`;
        let objectValue = settingValue[objectName];

        if (defaultValues[objectKey]) {
          // SSL証明書のチェック設定を処理
          if (objectKey.includes('sslCertCheck')) {
            defaultValues[objectKey] = JSON.parse(String(objectValue));
          } else {
            defaultValues[objectKey] = objectValue;
          }
        }
      }
    } else {
      // 直接プリミティブ型の値を設定
      defaultValues[key][settingName] = settingValue;
    }
  }
}

// 使用例
setAdminSettingFormValues(defaultValues, 'WebSocket');



import { onMounted } from 'vue';

// 型を定義
type SettingValue = string | number | boolean;
type DataType = Record<string, Record<string, SettingValue>>;

// デフォルトの設定オブジェクト
const defaultValues: DataType = {
  connection: {
    method: 'None',
  },
  WebSocket: {
    authMethod: 1,
    endpoint_port: 443,
  },
  cloudapi: {
    cloud_login_sslCertCheck: false,
  }
};

// 管理設定フォームの値を設定する関数
function setAdminSettingFormValues(data: DataType, key: string) {
  let settingData = data[key];
  if (!settingData) return;  // データが存在しない場合は終了

  for (let settingName in settingData) {
    let settingValue = settingData[settingName];

    if (typeof settingValue === 'object') {
      for (let objectName in settingValue) {
        let objectKey = `${settingName}.${objectName}`;
        let objectValue = settingValue[objectName];

        if (defaultValues[objectKey]) {
          // SSL証明書のチェック設定を処理
          if (objectKey.includes('sslCertCheck')) {
            defaultValues[objectKey] = JSON.parse(String(objectValue));
          } else {
            defaultValues[objectKey] = objectValue;
          }
        }
      }
    } else {
      // 直接プリミティブ型の値を設定
      defaultValues[key][settingName] = settingValue;
    }
  }
}

// VueのonMountedで実行する
onMounted(() => {
  setAdminSettingFormValues(defaultValues, 'WebSocket');
});



interface Form {
  label: string;
  Component: string;
  type: string;
  category: string;
  name: string;
  min?: string;
  max?: string;
  value?: string;
  placeholder?: string;
  display: string;
  validate?: string;
  required: boolean;
}

const forms: Form[] = [
  {
    label: "接続方法",
    Component: "BTN_Dropdown",
    type: "dropdown",
    category: "WebSocket",
    name: "connection_method",
    value: "None",
    placeholder: "接続方法を選択してください",
    display: "WebSocket",
    validate: "",
    required: false,
  },
  {
    label: "タイトル",
    Component: "input",
    type: "text",
    category: "WebSocket",
    name: "title",
    placeholder: "タイトルを入力してください",
    display: "WebSocket",
    required: false,
  },
  // 他のフォーム要素をここに追加
];

type AdminSettingValue = string | number | boolean;

type AdminSettingData = Record<string, Record<string, AdminSettingValue>>;

let adminSettingData: AdminSettingData = { cloud_connect: {} };

function setCloudSetting(
  isError: Ref<boolean>,
  isDialog: Ref<boolean>,
  isLoad: Ref<boolean>,
  errors: Ref<Record<string, any>>,
  settingValue: AdminSettingValue
) {
  for (let formConfig of forms) {
    if (formConfig.category && formConfig.name) {
      adminSettingData.cloud_connect[formConfig.category] = {
        ...adminSettingData.cloud_connect[formConfig.category],
        [formConfig.name]: settingValue,
      };
    }
  }
}



interface Form {
  label: string;
  Component: string;
  type: string;
  category: string;
  name: string;
  min?: string;
  max?: string;
  value?: string;
  placeholder?: string;
  display: string;
  validate?: string;
  required: boolean;
}

const forms: Form[] = [
  {
    label: "接続方法",
    Component: "BTN_Dropdown",
    type: "dropdown",
    category: "WebSocket",
    name: "connection_method",
    value: "None",
    placeholder: "接続方法を選択してください",
    display: "WebSocket",
    validate: "",
    required: false,
  },
  {
    label: "タイトル",
    Component: "input",
    type: "text",
    category: "WebSocket",
    name: "title",
    placeholder: "タイトルを入力してください",
    display: "WebSocket",
    required: false,
  },
  // 他のフォーム要素をここに追加
];

type AdminSettingValue = string | number | boolean;

type AdminSettingData = Record<string, Record<string, AdminSettingValue>>;

let adminSettingData: AdminSettingData = { cloud_connect: {} };

function setCloudSetting(
  isError: Ref<boolean>,
  isDialog: Ref<boolean>,
  isLoad: Ref<boolean>,
  errors: Ref<Record<string, string | number | boolean>>,
  settingValue: AdminSettingValue
) {
  for (let formConfig of forms) {
    if (formConfig.category && formConfig.name) {
      adminSettingData.cloud_connect[formConfig.category] = {
        ...adminSettingData.cloud_connect[formConfig.category],
        [formConfig.name]: settingValue,
      };
    }
  }
}


interface LoggerLevel {
  text: string;
  value: string | number;
}

const loggerLevels: LoggerLevel[] = [
  { text: "papigw.admin.application_settings.OFF", value: 0 },
  { text: "papigw.admin.application_settings.FATAL", value: 1 }
];

type SettingValue = string | number | boolean | { [key: string]: string | number | boolean };
type DataType = Record<string, Record<string, SettingValue>>;

function setAdminSettingFormValues(data: DataType, key: string) {
  let setting_data = data[key];
  for (let setting_name in setting_data) {
    let setting_value = setting_data[setting_name];
    const loggerLevel = loggerLevels.find(level => level.value === setting_value);
    if (loggerLevel) {
      // 必要に応じて loggerLevel.text または loggerLevel.value を使用
      console.log(`設定: ${setting_name}, 値: ${loggerLevel.text}`);
    }
  }
}

onMounted(() => {
  // 初期化または設定用コードをここに記述
});

type SettingValue = string | number | boolean | { [key: string]: string | number | boolean };
type DataType = Record<string, Record<string, SettingValue>>;

function setAdminSettingFormValues(data: DataType, key: string) {
  let setting_data = data[key];
  for (let setting_name in setting_data) {
    let setting_value = setting_data[setting_name];
    
    // `loggerLevels` の中から `setting_value` に一致するものを検索
    const loggerLevel = loggerLevels.find(level => level.value === setting_value);
    if (loggerLevel) {
      loggerLevelValue.value = loggerLevel.value; // loggerLevelValueに適切な値を設定
    }
  }
}


import { ref } from 'vue'; // Vueのrefをインポートする

// defaultValuesを適切に定義
const defaultValues = {
  value: {
    level: 0 // 適切な初期値を設定してください
  }
};

type SettingValue = string | number | boolean | { [key: string]: string | number | boolean };
type DataType = Record<string, Record<string, SettingValue>>;

// loggerLevelsのサンプル定義
const loggerLevels: { text: string; value: number }[] = [
  { text: "papigw.admin.application_settings.OFF", value: 0 },
  { text: "papigw.admin.application_settings.FATAL", value: 1 }
];

// loggerLevelValueをrefで初期化
const loggerLevelValue = ref(defaultValues.value.level);

// loggerLevelChange関数を定義
const loggerLevelChange = () => {
  console.log(loggerLevelValue.value); // loggerLevelValueの現在の値をログに出力
};

function setAdminSettingFormValues(data: DataType, key: string) {
  let setting_data = data[key];

  if (setting_data) { // keyが存在する場合のみ処理
    for (let setting_name in setting_data) {
      let setting_value = setting_data[setting_name];

      // `loggerLevels` の中から `setting_value` に一致するものを検索
      const loggerLevel = loggerLevels.find(level => level.value === setting_value);
      if (loggerLevel) {
        loggerLevelValue.value = loggerLevel.value; // loggerLevelValueに適切な値を設定
      }
    }
  } else {
    console.warn(`キー "${key}" が見つかりません。`);
  }
}


このエラーが発生する理由は、TypeScriptが setting_data のプロパティが何であるかを認識しておらず、object 型には具体的なプロパティ情報がないためです。object 型は一般的すぎるため、具体的な型定義が必要です。

以下のようにコードを修正できます。
	1.	DataType と setting_data に型情報を具体的に指定する。
	2.	setting_data の型を明確にするため、適切な型定義を行う。

修正版コード:

onMounted(() => {
  type SettingDataType = {
    crawler_waiting_num?: number;
    crawler_time?: number;
    level?: number;
  };

  type DataType = Record<string, SettingDataType>;

  function setAdminSettingFormValues(data: DataType, key: string) {
    const setting_data = data[key]; // 'key' で取得したオブジェクト

    if (!setting_data) {
      console.error(`No data found for key: ${key}`);
      return;
    }

    for (const setting_name in setting_data) {
      let setting_value;
      if (setting_name === 'crawler_waiting_num') {
        setting_value = setting_data.crawler_waiting_num;
      } else if (setting_name === 'crawler_time') {
        setting_value = setting_data.crawler_time;
      } else if (setting_name === 'level') {
        setting_value = setting_data.level;
      }
      console.log(`Setting: ${setting_name}, Value: ${setting_value}`);
    }
  }
});

修正内容

	1.	型定義の追加
	•	SettingDataType を定義し、各プロパティを明確に指定しました。
	•	DataType は Record<string, SettingDataType> としてキーが文字列、値が SettingDataType であることを定義しました。
	2.	型のチェック
	•	if (!setting_data) を追加して undefined チェックを行っています。
	3.	ループ内の条件式の修正
	•	元のコードでは setting_name が同じ値 (crawler_waiting_num) を複数回チェックしていました。
	•	条件を適切に修正しました。

結果

この修正により、TypeScriptエラーが解消され、setting_data のプロパティを安全にアクセスできるようになります。

onMounted(() => {
  type SettingDataType = {
    crawler_waiting_num?: string;
    crawler_time?: string;
    level?: string | Record<string, string | boolean>;
  };

  type DataType = Record<string, SettingDataType>;

  function setAdminSettingFormValues(data: DataType, key: string) {
    const setting_data = data[key];

    for (const setting_name in setting_data) {
      let setting_value: string | Record<string, string | boolean> | undefined;

      if (setting_name === "crawler_waiting_num") {
        setting_value = setting_data.crawler_waiting_num;
      } else if (setting_name === "crawler_time") {
        setting_value = setting_data.crawler_time;
      } else if (setting_name === "level") {
        setting_value = setting_data.level;
      }

      if (typeof setting_value === "object" && setting_value !== null) {
        for (const object_name in setting_value) {
          const object_value = setting_value[object_name];
          const object_id = `input-${key}-${object_name}`;

          let formatted_value: string;
          if (object_value === true) {
            formatted_value = "true";
          } else if (object_value === false) {
            formatted_value = "false";
          } else {
            formatted_value = object_value as string;
          }

          const element = document.getElementById(object_id);
          if (element) {
            defaultValues.value[object_name] = formatted_value;
          }
        }
      } else if (setting_name && setting_value) {
        const element_id = `input-${key}-${setting_name}`;
        const element = document.getElementById(element_id);
        if (element) {
          defaultValues.value[setting_name] = setting_value as string;
        }
      }
    }
  }
});


提示されたコードの問題を修正しました。以下は修正版のコードです。

修正版コード

onMounted(() => {
  type SettingDataType = {
    crawler_waiting_num?: string;
    crawler_time?: string;
    level?: string | Record<string, string | boolean>;
  };

  type DataType = Record<string, SettingDataType>;

  function setAdminSettingFormValues(data: DataType, key: string) {
    const setting_data = data[key];

    for (const setting_name in setting_data) {
      let setting_value: string | Record<string, string | boolean> | undefined;

      if (setting_name === "crawler_waiting_num") {
        setting_value = setting_data.crawler_waiting_num;
      } else if (setting_name === "crawler_time") {
        setting_value = setting_data.crawler_time;
      } else if (setting_name === "level") {
        setting_value = setting_data.level;
      }

      if (typeof setting_value === "object" && setting_value !== null) {
        for (const object_name in setting_value) {
          const object_value = setting_value[object_name];
          const object_id = `input-${key}-${object_name}`;

          let formatted_value: string;
          if (object_value === true) {
            formatted_value = "true";
          } else if (object_value === false) {
            formatted_value = "false";
          } else {
            formatted_value = object_value as string;
          }

          const element = document.getElementById(object_id);
          if (element) {
            defaultValues.value[object_name] = formatted_value;
          }
        }
      } else if (setting_name && setting_value) {
        const element_id = `input-${key}-${setting_name}`;
        const element = document.getElementById(element_id);
        if (element) {
          defaultValues.value[setting_name] = setting_value as string;
        }
      }
    }
  }
});

修正点の詳細

	1.	if 条件の修正:
	•	= は代入演算子であり、比較には === を使用する必要があります。

if (setting_name === "crawler_waiting_num") {


	2.	型エラーの修正:
	•	typeof setting_value === "object" の使用で、for...in に渡す型が適切になるよう修正しました。
	•	null チェックを追加 (setting_value !== null)。
	3.	構文エラーの修正:
	•	不適切な括弧や構文を修正しました。

const object_id = `input-${key}-${object_name}`;


	4.	object_value の型チェック:
	•	object_value が真偽値であるか、文字列であるかを判定し、適切に処理しました。
	5.	defaultValues の型適用:
	•	defaultValues.value に値を設定する際、適切な型変換を行いました。
	6.	不要な重複条件を削除:
	•	else if に重複した crawler_waiting_num が3つあったため、正しい条件に整理しました。

これでエラーは解消されるはずです。コードが適切に動作しない場合、具体的な挙動を教えてください。さらに調整が必要であればサポートします！