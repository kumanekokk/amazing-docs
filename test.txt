onMounted(() => {
  type DataType = Record<string, Record<string, any>>;

  function setAdminSettingFormValues(data: DataType, key: string) {
    const settingData = data[key];
    for (const settingName in settingData) {
      const settingValue = settingData[settingName];
      // 各設定名と設定値を使って処理を行う
      console.log(`設定 ${settingName} の値は ${settingValue} です`);
      // 例: フォームのフィールドを更新する、リアクティブ変数に格納するなど
    }
  }

  // 使用例
  const adminSettings: DataType = {
    userPermissions: {
      canEdit: true,
      canDelete: false,
    },
    displaySettings: {
      theme: "dark",
      fontSize: "medium",
    },
  };

  // 特定のキーを使用して関数を呼び出す
  setAdminSettingFormValues(adminSettings, "userPermissions");
});


onMounted(() => {
  // 設定値は `string`、`number`、または `boolean` のいずれか
  type SettingValue = string | number | boolean;
  type DataType = Record<string, Record<string, SettingValue>>;

  function setAdminSettingFormValues(data: DataType, key: string) {
    const settingData = data[key];
    for (const settingName in settingData) {
      const settingValue = settingData[settingName];
      console.log(`設定 ${settingName} の値は ${settingValue} です`);
      // ここで各設定値に対して適切な処理を実行
    }
  }

  // 使用例
  const adminSettings: DataType = {
    userPermissions: {
      canEdit: true,
      canDelete: false,
    },
    displaySettings: {
      theme: "dark",
      fontSize: 14,
    },
  };

  // 特定のキーを使って関数を呼び出す
  setAdminSettingFormValues(adminSettings, "userPermissions");
});


onMounted(() => {
  // 設定値がオブジェクトを含む場合の型定義
  type SettingValue = string | number | boolean | { [key: string]: string | number | boolean };
  type DataType = Record<string, Record<string, SettingValue>>;

  function setAdminSettingFormValues(data: DataType, key: string) {
    const settingData = data[key];
    for (const settingName in settingData) {
      const settingValue = settingData[settingName];
      console.log(`設定 ${settingName} の値は ${settingValue} です`);
    }
  }

  // 使用例
  const adminSettings: DataType = {
    userPermissions: {
      canEdit: true,
      canDelete: false,
      additionalInfo: { maxAttempts: 5, isAdmin: true },
    },
    displaySettings: {
      theme: "dark",
      fontSize: 14,
    },
  };

  setAdminSettingFormValues(adminSettings, "userPermissions");
});


// 型を定義
type SettingValue = string | number | boolean;
type DefaultValues = Record<string, Record<string, SettingValue>>;

// デフォルトの設定オブジェクトを定義
const defaultValues: DefaultValues = {
  connection: {
    method: 'None',
  },
  WebSocket: {
    authMethod: 1,
    endpoint_port: 443,
  },
  cloudapi: {
    cloud_login_sslCertCheck: false,
  }
};

// WebSocket の認証方法を取得および変更する関数
let websocketAuthMethodValue = defaultValues.WebSocket.authMethod;

const websocketAuthMethodChange = (value: string | number) => {
  // 新しい値の型が一致するか確認してから変更
  websocketAuthMethodValue = value;
};

// 管理設定フォームの値を設定する関数
function setAdminSettingFormValues(data: DefaultValues, key: string) {
  let settingData = data[key];
  if (!settingData) return;  // 設定が見つからなければ終了

  for (let settingName in settingData) {
    let settingValue = settingData[settingName];

    if (typeof settingValue === 'object') {
      for (let objectName in settingValue) {
        let objectKey = `${settingName}.${objectName}`;
        let objectValue = settingValue[objectName];

        if (defaultValues[objectKey]) {
          // SSL証明書のチェック設定を処理
          if (objectKey.includes('sslCertCheck')) {
            defaultValues[objectKey] = JSON.parse(String(objectValue));
          } else {
            defaultValues[objectKey] = objectValue;
          }
        }
      }
    } else {
      // 直接プリミティブ型の値を設定
      defaultValues[key][settingName] = settingValue;
    }
  }
}

// 使用例
setAdminSettingFormValues(defaultValues, 'WebSocket');



import { onMounted } from 'vue';

// 型を定義
type SettingValue = string | number | boolean;
type DataType = Record<string, Record<string, SettingValue>>;

// デフォルトの設定オブジェクト
const defaultValues: DataType = {
  connection: {
    method: 'None',
  },
  WebSocket: {
    authMethod: 1,
    endpoint_port: 443,
  },
  cloudapi: {
    cloud_login_sslCertCheck: false,
  }
};

// 管理設定フォームの値を設定する関数
function setAdminSettingFormValues(data: DataType, key: string) {
  let settingData = data[key];
  if (!settingData) return;  // データが存在しない場合は終了

  for (let settingName in settingData) {
    let settingValue = settingData[settingName];

    if (typeof settingValue === 'object') {
      for (let objectName in settingValue) {
        let objectKey = `${settingName}.${objectName}`;
        let objectValue = settingValue[objectName];

        if (defaultValues[objectKey]) {
          // SSL証明書のチェック設定を処理
          if (objectKey.includes('sslCertCheck')) {
            defaultValues[objectKey] = JSON.parse(String(objectValue));
          } else {
            defaultValues[objectKey] = objectValue;
          }
        }
      }
    } else {
      // 直接プリミティブ型の値を設定
      defaultValues[key][settingName] = settingValue;
    }
  }
}

// VueのonMountedで実行する
onMounted(() => {
  setAdminSettingFormValues(defaultValues, 'WebSocket');
});



interface Form {
  label: string;
  Component: string;
  type: string;
  category: string;
  name: string;
  min?: string;
  max?: string;
  value?: string;
  placeholder?: string;
  display: string;
  validate?: string;
  required: boolean;
}

const forms: Form[] = [
  {
    label: "接続方法",
    Component: "BTN_Dropdown",
    type: "dropdown",
    category: "WebSocket",
    name: "connection_method",
    value: "None",
    placeholder: "接続方法を選択してください",
    display: "WebSocket",
    validate: "",
    required: false,
  },
  {
    label: "タイトル",
    Component: "input",
    type: "text",
    category: "WebSocket",
    name: "title",
    placeholder: "タイトルを入力してください",
    display: "WebSocket",
    required: false,
  },
  // 他のフォーム要素をここに追加
];

type AdminSettingValue = string | number | boolean;

type AdminSettingData = Record<string, Record<string, AdminSettingValue>>;

let adminSettingData: AdminSettingData = { cloud_connect: {} };

function setCloudSetting(
  isError: Ref<boolean>,
  isDialog: Ref<boolean>,
  isLoad: Ref<boolean>,
  errors: Ref<Record<string, any>>,
  settingValue: AdminSettingValue
) {
  for (let formConfig of forms) {
    if (formConfig.category && formConfig.name) {
      adminSettingData.cloud_connect[formConfig.category] = {
        ...adminSettingData.cloud_connect[formConfig.category],
        [formConfig.name]: settingValue,
      };
    }
  }
}



interface Form {
  label: string;
  Component: string;
  type: string;
  category: string;
  name: string;
  min?: string;
  max?: string;
  value?: string;
  placeholder?: string;
  display: string;
  validate?: string;
  required: boolean;
}

const forms: Form[] = [
  {
    label: "接続方法",
    Component: "BTN_Dropdown",
    type: "dropdown",
    category: "WebSocket",
    name: "connection_method",
    value: "None",
    placeholder: "接続方法を選択してください",
    display: "WebSocket",
    validate: "",
    required: false,
  },
  {
    label: "タイトル",
    Component: "input",
    type: "text",
    category: "WebSocket",
    name: "title",
    placeholder: "タイトルを入力してください",
    display: "WebSocket",
    required: false,
  },
  // 他のフォーム要素をここに追加
];

type AdminSettingValue = string | number | boolean;

type AdminSettingData = Record<string, Record<string, AdminSettingValue>>;

let adminSettingData: AdminSettingData = { cloud_connect: {} };

function setCloudSetting(
  isError: Ref<boolean>,
  isDialog: Ref<boolean>,
  isLoad: Ref<boolean>,
  errors: Ref<Record<string, string | number | boolean>>,
  settingValue: AdminSettingValue
) {
  for (let formConfig of forms) {
    if (formConfig.category && formConfig.name) {
      adminSettingData.cloud_connect[formConfig.category] = {
        ...adminSettingData.cloud_connect[formConfig.category],
        [formConfig.name]: settingValue,
      };
    }
  }
}
